(* Program consists of functions *)
program      ::= function* ;

(* Function is determined with a type,identifier, parameters, and block of code *)
function     ::= "func" ident "(" ( parameters )? ")" ":" type block ;

(* Each parameter has a type *)
parameters   ::= parameter ( "," parameter )* ;
parameter    ::= ident ":" type ;

(* A block contains atleast 0 statements *)
block        ::= "{" statement* "}" ;

(* A statement can be any one of these *)
statement    ::= variable_declaration ";" 
               | assignment ";" 
               | print_statement ";" 
               | if_statement 
               | for_statement
               | while_statement 
               | return_statement ";"
               | block
               | do_until_statement ;

(* A variable declaration has an optional type, identifier, and an expression *)
variable_declaration  ::= "let" ident (":" type)? "=" expression ;

(* An assignment has an identifier and an expression (optional) *)
assignment   ::= ident ( "=" expression )? ;

print_statement   ::= "print" "(" expression ")" ;

(* Nested if else statements can exist *)
if_statement  ::= "if" "(" expression ")" block ( "else" ( if_statement | block ) )? ;

while_statement ::= "while" "(" expression ")" block ;

(* For statement *)
for_statement ::= "for" "(" ( assignment | variable_declaration ) ";" expression ";" assignment ")" block ;

return_statement ::= "return" expression ;

(* These are called atleast once, compared to while loops which may be called 0 times *)
do_until_statement ::= "do" block "until" "(" expression ")" ;

(* An expression can be any one of these *)
expression   ::= term ( ( "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "or" | "and" ) term )* ;
(* A term can be an:
    - identifier
    - number
    - negative term
    - expression in parentheses
    - function call
*)
term         ::= ident
               | NUMBER 
               | ( "-" | "!" ) term
               | term ( "^" term )*
               
               | "(" expression ")" 
               | function_call ;

function_call ::= ident "(" ( arguments )? ")" ;
arguments    ::= expression ( "," expression )* ;

type         ::= "int" | "float" | "string" | "bool" | "void" ;

ident           ::= [a-zA-Z][a-zA-Z0-9_]* ;

NUMBER       ::= [0-9]+ ( "." [0-9]+ )? ;